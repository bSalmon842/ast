/////////////////////////////////////
03JUN2022

- Continued work on introspection preprocessor
- Added Collider and nested structs to struct vis
- Added global colour tables and made Meta_DumpStruct use it to recolour nested structs
- Prepared preprocessor to start enum introspection
/////////////////////////////////////
08MAY2022

- Started on introspection preprocessor
- Added DEBUG_VALUE to display variables on screen
/////////////////////////////////////
06MAY2022

- Fixed issue with unprojection that broke accurate game camera region vis
/////////////////////////////////////
05MAY2022

- Finished implementation of discrete slider
- Finished memory region vis
/////////////////////////////////////
03MAY2022

- Added visualisation for memory allocation
- Started implementation of a discrete slider for changing zoom level on the memory vis
/////////////////////////////////////
02MAY2022

- Added visualisation for rendering
/////////////////////////////////////
01MAY2022

- Altered UnprojectPoint to be more consistent
- Added entity picking for debugging
- The debug config struct is now set on initialisation from the debug config macros
- Added tooltips for frame marker segments
/////////////////////////////////////
30APR2022

- Debug info now records the past 256 frames
- Added a frame timing graph across the 256 stored frames
- Frame Timing graph new shows frame marker times
/////////////////////////////////////
29APR2022

- Debug Menu layers now have colours to help differentiate layers
/////////////////////////////////////
28APR2022

- Added nesting menues with arbitrary layer counts to the debug menu
/////////////////////////////////////
27APR2022

- Implemented platform functions for writing files
- Added WriteDebugConfigFile for writing out debug values in preparation for self re-compilation
- Implemented DebugSystemCommand for executing system commands
- Selecting debug options now recompiles the game to save overhead on the debug system when not enabled
- Debug Info from the previous frame(s) is now flushed to prevent an error with function names
/////////////////////////////////////
23APR2022

- Fixed a bug with how mouse buttons were being handled in the platform layer causing incorrect behaviour
- Cleaned up remaining debug mode globals
- Timing Info panel can now be moved by holding Right Mouse Button over the panel
/////////////////////////////////////
22APR2022

- Abstracted tooltips to a push function similar to HollowRects
- Moved some of the debug globals out to DebugSettings in DebugState
- Started on a debug menu to control options
- Added charWidth for monospace fonts to FontMetadata
- Added DebugButton function to act as an ImGUI style button for the debug menu
- Moved changing debug options into the debug menu
/////////////////////////////////////
21APR2022

- Complete restructure of the debug restructure, did away with a lot of the complexity for my own sanity
- Added mouse point tracking to Game_Input as well as a point readout next to the fps
- Fixed issue where '\n' was advancing text lines in the wrong direction
- Implemented hover tooltip for debug lines
/////////////////////////////////////
16APR2022

- All debug vis is now broken as we are in the middle of a debug restructure
/////////////////////////////////////
15APR2022

- Reworked Render Entry sorting again, now sorts an array of RenderEntry_Headers which is then used in the renderer instead of the pushbuffer memory
- Continued debug overhaul, now includes the platform layer, frame segment bars are currently broken
/////////////////////////////////////
14APR2022

- Continued debug overhaul, setup for platform layer inclusion into new debug system
- Identified significant slowdown is in PushRenderEntry when it does the entry insertion sorting
/////////////////////////////////////
13APR2022

- Finished frame timestamp vis
- Moved GetAsset to push time
- Removed some unnecessary clutter in OpenGL_Render
- Removed GetKerningInfo due to it only being used in one place
- Continued debug work, debug events system
/////////////////////////////////////
12APR2022

- Moved debug functions out to ast_debug.cpp
- Removed RenderString
- Included stb_sprintf for faster sprintf and avoiding CRT
- Added second PushRect function which takes a min and a max
- Added graphs for each function counter
- Setup frame timestamps, still needs vis
/////////////////////////////////////
11APR2022

- Fixed broken build from halfway-done debug refactor
- Change Camera.pos to a Rect3f so that UI can access the Camera dims
- Added parameter in the font packing in the asset builder to allow different font sizes
- Made debug timed scopes thread-safe
- Added separate path for orthographic render positioning
- Added Rect behind debug info to see the info a bit easier
- Cleaned up some old redundant debug code from the platform layer (Console FPS printing, HandleCycleCounter)
- Continued work on debugging infrastructure, including specific debug memory, rolling data buffer, and min/max/ave metrics
/////////////////////////////////////
10APR2022

- Made emitters be stored in Game_State as an array, changed InitialiseEmitter to AddEmitter
- Added Bitmap Support to Emitters and Particles, Emitters hold a selection of BitmapIDs, one of which is passed to a particle
- Added maxParticleSpeed to EmitterProgressionInfo
- Removed Debug File reading functions from platform layer and PlatformAPI
- Started work on new debugging tools (ast_debug.h)
/////////////////////////////////////
08APR2022

- Added zLayer to Push functions, which allows entries with the same z coord to be sorted in front or behind one another
- Added particle count to Emitter and InitialiseEmitter to change how many particles an Emitter can output at once
- Moved values in the Emitter relating to universal start and end progression out to EmitterProgressionInfo
- Added basic particle collision with entities which is enabled through the emitter
/////////////////////////////////////
07APR2022

- Removed EmitterShapeType and replaced with EmitterShapeInfo, which holds any info regarding the shape of the emission
- Added base to EmitterShapeInfo to accomodate cylinder shape emissions
- Added initial and end colours to Emitter to allow particles to colour lerp
- Got rid of Bubble Sort, Render Entries now sort themselves at push-time
- Added sortZ and entrySize to RenderEntry_Header to help sorting
- Particle Simulation is now handled by PARTICLE_SIM functions held by the emitter
- Fixed some errors when AST_INTERNAL == 0
/////////////////////////////////////
06APR2022

- Removed RenderGroup struct, moved worldToPixelConversion to Camera
- worldToPixelConversion is now held and passed by the Camera to Push functions
- Removed the render TempMemory from UpdateRender due to it not being used
- Added Camera Mode functions for Perspective and Orthograpic rendering
- Fixed issue in Render Entry sorting where Clears were being placed after other entries
- Fixed Bubble Sort order
- Added basic Particle system with Particle and Emitter structs with radial emission
/////////////////////////////////////
05APR2022

- Added Unprojection to camera functions
- Added camera bounds displaying with debug_regions
- Added debug camera movement mode
- Made collision be ignored if entities are on different z coords
- Added Bubble Sort for Render Entries
- Change worldToPixelConversion to be more static and based on aspect ratio rather than calculated according to resolution
- Added World struct with dims being replaced by rect area and concept of a configurable world border (ast_world.*)
- Refactored everything using worldDims to use new World struct
- Changed MoveEntity to check position in World to know when to loop or stop
- Removed Entity::loop
/////////////////////////////////////
04APR2022

- Pulled camera settings out into it's own struct and implemented relevant functions (struct Camera, ast_camera.cpp)
- Fixed issue where the z of each entity was being reset to 0
- Added AdjustWindowRect before CreateWindow to get proper client area size
/////////////////////////////////////